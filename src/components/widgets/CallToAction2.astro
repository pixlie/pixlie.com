---
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { CallToAction, Widget } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: CallToAction[];
  titleLink?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  actions = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
  titleLink,
} = Astro.props;

// Default actions if none provided
const defaultActions: CallToAction[] = [
  {
    variant: 'primary',
    text: 'Get Started',
    href: '#',
    icon: 'tabler:rocket',
  },
  {
    variant: 'secondary',
    text: 'Learn More',
    href: '#',
  },
];

// Use provided actions or fallback to defaults
const buttonActions = Array.isArray(actions) && actions.length > 0 ? actions : defaultActions;

// Process the anchor ID if titleLink is a hash link
const anchorId = titleLink?.startsWith('#') ? titleLink.slice(1) : undefined;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div
    class="max-w-3xl mx-auto text-center p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600"
    id={anchorId}
  >
    <Headline
      title={title}
      subtitle={subtitle}
      tagline={tagline}
      classes={{
        container: 'mb-0 md:mb-0',
        title: 'text-4xl md:text-4xl font-bold tracking-tighter mb-4 font-heading',
        subtitle: 'text-xl text-muted dark:text-slate-400',
      }}
    />
    <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mt-6">
      {buttonActions.map((action) => (
        <div class="flex w-full sm:w-auto">
          <Button
            {...action}
            class={`w-full sm:mb-0 ${action.class || ''}`}
          />
        </div>
      ))}
    </div>
  </div>
</WidgetWrapper>